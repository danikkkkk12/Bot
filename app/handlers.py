import sqlite3
import aiohttp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import app.keyboard as kb
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from config import *

router1 = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_database():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE
        )
    ''')
    conn.commit()
    conn.close()

setup_database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SpamState(StatesGroup):
    message = State()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        return {"status": "success", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."}
    except sqlite3.IntegrityError:
        return {"status": "error", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."}
    except sqlite3.Error as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"}
    except Exception as e:
        return {"status": "error", "message": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = [row[0] for row in cursor.fetchall()]
        return users
    except sqlite3.OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []
    finally:
        conn.close()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
async def check_registration(user_id):
    api_url = f"https://1wcneg.com/gtyb/api/check_registration?user_id={user_id}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("registered", False)
                else:
                    return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@router1.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    add_user(user_id)
    with open('start.jpg', 'rb') as photo:
        await message.answer_photo(
            FSInputFile('start.jpg'),
            caption=(
                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ {NAME}!'

                'üåê–®–∞–≥ 1 - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è '

                '‚ö™ –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –±–æ—Ç–∞ –∏ –ø—Ä–∏–º–∏–Ω–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:'

                '–ü—Ä–æ–º–æ–∫–æ–¥: üëâMinesCrazyüëà '

                'üîµ–ï—Å–ª–∏ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø–∞–ª–∏ –≤ —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:'

                '-–í—ã–π—Ç–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞'

                '-–ó–∞–∫—Ä—ã—Ç—å —Å–∞–π—Ç'

                '-–°–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ'

                '-–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞ MinesCrazy '

                '‚ÄºÔ∏è–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!'
            ),
            parse_mode='html',
            reply_markup=kb.reg
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
@router1.callback_query(F.data == 'yes')
async def yes_reg(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_registration(user_id):
        with open('success.jpg', 'rb') as photo:
            await callback.message.answer_photo(
                FSInputFile('success.jpg'),
                caption=(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–æ—Ç–æ–º.\n\n"
                    "üåê–®–∞–≥ 2 - –í–Ω–µ—Å–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç\n\n"
                    "‚ö™–ß—Ç–æ–±—ã –±–æ—Ç –æ—Ç–∫—Ä—ã–ª –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç (—Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç) –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –≤–∞–º —Å–ø–æ—Å–æ–±–æ–º.\n\n"
                    "üåü*–ß–µ–º –±–æ–ª—å—à–µ –¥–µ–ø–æ–∑–∏—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –£–†–û–í–ï–ù–¨ –≤ –±–æ—Ç–µ, –∞ —á–µ–º –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å –≤ –±–æ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å.*\n\n"
                    "‚ÄºÔ∏è–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º."
                ),
                parse_mode='Markdown',
                reply_markup=kb.regget
            )
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä—ã"
@router1.callback_query(F.data == 'play')
async def games(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await check_registration(user_id):
        with open('start.jpg', 'rb') as photo:
            await callback.message.delete()
            await callback.message.answer_photo(
                FSInputFile('start.jpg'),
                caption='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:',
                parse_mode='html',
                reply_markup=kb.games
            )
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router1.callback_query(F.data == 'back')
async def back(callback: CallbackQuery):
    with open('start.jpg', 'rb') as photo:
        await callback.message.delete()
        await callback.message.answer_photo(
            FSInputFile('start.jpg'),
            caption='üïπ –í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            parse_mode='html',
            reply_markup=kb.regget
        )

# –ö–æ–º–∞–Ω–¥–∞ /admin
@router1.message(Command('admin'))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer('üíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ', reply_markup=kb.admin_panel)
    else:
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@router1.callback_query(F.data == 'spam')
async def admin_panel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ')
    await state.set_state(SpamState.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router1.message(SpamState.message)
async def spam_go(message: Message, state: FSMContext, bot: Bot):
    spam_text = message.text
    users = get_all_users()
    try:
        for user_id in users:
            await bot.send_message(user_id, spam_text)
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=kb.admin_panel)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router1.callback_query(F.data == 'stat')
async def users_handler(callback: CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        total_users = len(get_all_users())
        await callback.message.edit_text(f"üìä –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}", reply_markup=kb.stat)
    else:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω–∫–µ
@router1.callback_query(F.data == 'back_admin')
async def back_admin(callback: CallbackQuery):
    await callback.message.edit_text('üíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ', reply_markup=kb.admin_panel)
