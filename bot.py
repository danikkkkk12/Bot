import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.exceptions import TelegramRetryAfter
from aiohttp import web
from app.handlers import router1  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_HOST = 'https://bot-d92o.onrender.com'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ö–æ—Å—Ç
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)

async def handle_webhook(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram.
    """
    dp = request.app['dp']
    bot = request.app['bot']
    try:
        json_str = await request.json()
        update = types.Update(**json_str)
        await dp.feed_update(bot, update)
        return web.Response()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def handle_postback(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–±–µ–∫–æ–≤ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∏.
    """
    bot = request.app['bot']
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ POST, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        data = request.query  # –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON (POST), –∏—Å–ø–æ–ª—å–∑—É–π: data = await request.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"Received postback data: {data}")

        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        action = data.get('action')
        user_id = data.get('user_id')
        amount = data.get('amount')

        if action == 'registration':
            message = f"üéâ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\nUser ID: {user_id}"
            await bot.send_message(ADMIN_ID, message)

        elif action == 'deposit':
            message = f"üí∞ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!\nUser ID: {user_id}\nAmount: {amount}"
            await bot.send_message(ADMIN_ID, message)

        # –û—Ç–≤–µ—á–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∫–µ, —á—Ç–æ –≤—Å—ë –æ–∫
        return web.json_response({"status": "ok"})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–±–µ–∫–∞: {e}")
        return web.json_response({"status": "error", "message": str(e)}, status=500)

async def on_startup(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    """
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤–µ–±—Ö—É–∫–∞
        await asyncio.sleep(1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    except TelegramRetryAfter as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "Too Many Requests"
        logger.warning(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await on_startup(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    dp.include_router(router1)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup(bot)

    # –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app['dp'] = dp
    app['bot'] = bot

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.router.add_post(WEBHOOK_PATH, handle_webhook)  # –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram
    app.router.add_get('/postback', handle_postback)  # –î–ª—è –ø–æ—Å—Ç–±–µ–∫–æ–≤ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∏
    app.router.add_post('/postback', handle_postback)  # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv('PORT', 10000))  # –ü–æ—Ä—Ç –¥–ª—è Render
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        await asyncio.sleep(3600)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('Bye Bye')